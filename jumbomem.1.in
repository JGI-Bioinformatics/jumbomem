.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Pw  \" x to the yth power
.ie t \\$1\\$2\u\s-2\&\\$3\s0\d\\$4
.el \\$1\\$2^\\$3\\$4
..
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "JUMBOMEM 1"
.TH JUMBOMEM 1 "18 May 2010" "@VERSION@" " "
.SH "NAME"
jumbomem \- enable programs to page to remote RAM instead of to local disk
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBjumbomem\fR
[\fB\-\-help\fR]
[\fB\-\-version\fR]
[\fB\-\-nodes\fR=\fIcount\fR]
[\fB\-\-debug\fR=\fIlevel\fR]
[\fB\-\-pagesize\fR=\fIbytes\fR]
[\fB\-\-heartbeat\fR=\fIseconds\fR]
[\fB\-\-reserve\fR=\fIbytes\fR|\fIpercent\fR%]
[\fB\-\-slavemem\fR=\fIbytes\fR]
[\fB\-\-mastermem\fR=\fIbytes\fR]
[\fB\-\-pages\fR=\fIcount\fR|\fIpercent\fR%]
[\fB\-\-rankvar\fR=\fIvariable\fR]
[\fB\-\-baseaddr\fR=\fIaddress\fR|\fB+\fR\fIbytes\fR]
[\fB\-\-prefetch\fR[=\fBnone\fR|\fBnext\fR|\fBdelta\fR]
[\fB\-\-fast\-start\fR]
[\fB\-\-async\-evict\fR]
[\fB\-\-memcopy\fR]
[\fB\-\-nre\-entries\fR=\fIcount\fR]
[\fB\-\-nre\-retries\fR=\fIcount\fR]
[\fB\-\-nru\-interval\fR=\fImilliseconds\fR]
[\fB\-\-true\-nru\fR]
[\fB\-\-mlock\fR]
\&\fIcommand\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
JumboMem provides a low-effort solution to the problem of running
memory-hungry programs on memory-starved computers.  The JumboMem
middleware gives programs access to all of the memory in an entire
cluster, providing the illusion that all of the memory resides within
a single computer.  When a program exceeds the memory in one computer,
it automatically spills over into the memory of the next computer.
Behind the scenes, JumboMem handles all of the network communication
required to make this work; the user's program does not need to be
modified\*(--not even recompiled\*(--to take advantage of JumboMem.
Furthermore, JumboMem does not need administrator privileges to
install.  Any ordinary user with an account on a workstation cluster
has sufficient privileges to install and run JumboMem.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fBjumbomem\fR accepts the following command-line options (in roughly
descreasing order of usefulness):
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
Output a brief usage summary.
.IP "\fB\-\-version\fR" 8
.IX Item "--version"
Display the curent version of JumboMem.
.IP "\fB\-np\fR \fIcount\fR, \fB\-\-nodes\fR=\fIcount\fR" 8
.IX Item "-np count, --nodes=count"
Specify the number of nodes to use.  \fIcount\fR should be at least \f(CW3\fR:
one master plus two slaves.  The more nodes you have available, the
more memory you can use.
.IP "\fB\-\-debug\fR=\fIlevel\fR" 8
.IX Item "--debug=level"
Control the amount of debugging information that JumboMem outputs
(default\ level:\ \f(CW1\fR).  See the \s-1NOTES\s0 section below for a
detailed description of what gets output at each debug level.
.IP "\fB\-\-pagesize\fR=\fIbytes\fR" 8
.IX Item "--pagesize=bytes"
Designate a logical page size for JumboMem to use.  The default is
\&\f(CW262144\fR (256\^KB).  Applications with a high degree of spatial
locality (i.e.,\ those with largely contiguous data accesses)
generally perform better with large pages.  Applications with a low
degree of spatial locality (i.e.,\ those with essentially random
data accesses) generally perform better with small pages.
.IP "\fB\-\-heartbeat\fR=\fIseconds\fR" 8
.IX Item "--heartbeat=seconds"
At debug levels\ 1 and up, output a status message every \fIseconds\fR
seconds indicating the number of major page faults observed by the
operating system (should be close to 0) and by JumboMem (can be low or
high, depending on the application).
.IP "\fB\-\-reserve\fR=\fIbytes\fR|\fIpercent\fR%" 8
.IX Item "--reserve=bytes|percent%"
Reserve either \fIbytes\fR bytes or \fIpercent\fR% of the available memory
for use by the operating system or other, non-JumboMem processes.  The
default is \f(CW\*(C`1%\*(C'\fR.  This number should be increased if a JumboMem
process induces a non-negligible number of major \s-1OS\s0 page faults as
these can incur a significant performance penalty.
.IP "\fB\-\-slavemem\fR=\fIbytes\fR" 8
.IX Item "--slavemem=bytes"
Specify explicitly the amount of memory that each slave process can
serve.  While \fB\-\-reserve\fR specifies how much memory JumboMem should
not use, \fB\-\-slavemem\fR instead specifies how much memory JumboMem
should use.
.IP "\fB\-\-mastermem\fR=\fIbytes\fR" 8
.IX Item "--mastermem=bytes"
Specify explicitly the amount of memory that the JumboMem master
process is allowed to use for its local cache of remote pages (and
miscellaneous data structures).  While \fB\-\-reserve\fR specifies how much
memory JumboMem should not use, \fB\-\-mastermem\fR instead specifies how
much memory JumboMem should use.
.IP "\fB\-\-pages\fR=\fIcount\fR|\fIpercent\fR%" 8
.IX Item "--pages=count|percent%"
Limit the number of logical pages that JumboMem is allowed to cache
locally to either \fIcount\fR or to \fIpercent\fR% of the number of page
mappings supported by the operating system.  The default is \f(CW\*(C`70%\*(C'\fR.
The intention is to further avoid local paging to disk, as this
severely degrades the performance of a process run with JumboMem.
.IP "\fB\-\-rankvar\fR=\fIvariable\fR" 8
.IX Item "--rankvar=variable"
Designate an environment variable that distinguishes the master
process (rank\ 0 in the computation) from the slave processes (all
other ranks).  The \fBfindrankvars\fR \s-1MPI\s0 program included with JumboMem
suggests variables to use with \fB\-\-rankvar\fR.
.IP "\fB\-\-baseaddr\fR=\fIaddress\fR|\fB+\fR\fIbytes\fR" 8
.IX Item "--baseaddr=address|+bytes"
Force JumboMem to allocate its memory region at memory location
\&\fIaddress\fR or at \fIbytes\fR bytes past the default location (the end of
the program's data segment rounded up to the nearest JumboMem page
size).  JumboMem aborts if it cannot allocate its memory region at the
specified address or address delta.  Note that JumboMem will ensure
that its memory region begins on a multiple of the JumboMem page size,
rounding up \fIaddress\fR (or \fIdefault\fR+\fIbytes\fR) if necessary.
.IP "\fB\-\-prefetch\fR[=\fBnone\fR|\fBnext\fR|\fBdelta\fR" 8
.IX Item "--prefetch[=none|next|delta"
Enable prefetching of remote pages.  Most empirical tests of JumboMem
indicate that prefetching in fact degrades performance so the default
is \f(CW\*(C`none\*(C'\fR: no prefetching.  However, on some networks or \s-1MPI\s0
implementations enabling prefetching may improve performance.
Specifying \fB\-\-prefetch\fR=\fBnext\fR causes the statically subsequent page
to be prefetched on every page access.  Specifying
\&\fB\-\-prefetch\fR=\fBdelta\fR or just \fB\-\-prefetch\fR induces prefetching of
the page at the same distance from the previous fetch.  For example,
after fetching pages \fIi\fR and \fIi\fR+3 JumboMem would prefetch page
\&\fIi\fR+6.
.IP "\fB\-\-fast\-start\fR" 8
.IX Item "--fast-start"
Prevent JumboMem's initial calibration of reasonable memory sizes.
Normally, as part of JumboMem initialization, each processs allocates
a large region of memory (the size it expects to be able to use),
accesses all of the data in it, and, if any major \s-1OS\s0 page faults were
detected, reduces the size of the region and tries again.  Doing so
helps reduce the number of major \s-1OS\s0 page faults.  \fB\-\-fast\-start\fR
tells JumboMem to skip this step, thereby initializing faster but
possibly running slower.  \fB\-\-fast\-start\fR is also good for
benchmarking because it ensures that the same memory sizes are used
across runs.
.IP "\fB\-\-async\-evict\fR" 8
.IX Item "--async-evict"
Evict pages without waiting for the eviction to complete.  Most
empirical tests of JumboMem indicate that this does not improve
performance so the default is to wait for evictions to complete.
However, on some networks or \s-1MPI\s0 implementations enabling asynchronous
evictions may improve performance.
.IP "\fB\-\-memcopy\fR" 8
.IX Item "--memcopy"
Copy pages into a static communication buffer before transmitting them
and copy pages from a static communication buffer after receiving
them.  On most networks and \s-1MPI\s0 implementations these extra copies
degrade performance.  However, on some connection-based networks,
limiting the number of registered (a.k.a.\ pinned) memory regions
may compensate for the extra copies in terms of performance.
.IP "\fB\-\-nre\-entries\fR=\fIcount\fR" 8
.IX Item "--nre-entries=count"
When using \s-1NRE\s0 (not recently evicted) page replacement, keep track of
the \fIcount\fR most recently evicted pages.  If a (randomly selected)
victim page is one of the \fIcount\fR most recently evicted pages, the
algorithm selects a different victim page.
.IP "\fB\-\-nre\-retries\fR=\fIcount\fR" 8
.IX Item "--nre-retries=count"
When using \s-1NRE\s0 (not recently evicted) page replacement, if a victim
page was recently evicted, the algorithm selects a different victim
page.  This process repeats \fIcount\fR times before the algorithm gives
up and evicts a recently evicted page.
.IP "\fB\-\-nru\-interval\fR=\fImilliseconds\fR" 8
.IX Item "--nru-interval=milliseconds"
When using pseudo-NRU (not recently used) page replacement (the
default when using the \s-1NRU\s0 page-replacement module), clear all
\&\*(L"accessed\*(R" bits every \fImilliseconds\fR milliseconds.  \s-1NRU\s0 replacement
schemes favor replacing pages that have not recently been accessed
over pages that have.  The default is \f(CW5000\fR (5\ seconds).
.IP "\fB\-\-true\-nru\fR" 8
.IX Item "--true-nru"
Use a true \s-1NRU\s0 (not recently used) page-replacement scheme instead of
the default pseudo-NRU scheme when running with the \s-1NRU\s0
page-replacement module.  A true \s-1NRU\s0 scheme distinguishes between
dirty (modified) and clean (unmodified) pages.  Clean pages are
favored for replacement because evictions do not require network
traffic.  Unfortunately, because JumboMem is an entirely user-level
system, keeping track of each page's modification state requires a
significant amount of extra work per fault, and this typically results
in worse performance than simply assuming that all pages are dirty.
Applications that performance significantly more reads than writes may
benefit from \fB\-\-true\-nru\fR.
.IP "\fB\-\-mlock\fR" 8
.IX Item "--mlock"
Attempt to use \f(CW\*(C`mlock()\*(C'\fR to lock memory pages into \s-1RAM\s0 while in use.
Use of this option may improve performance by reducing the number of
major \s-1OS\s0 page faults.  However, it may also lead the \s-1OS\s0 to deem the
JumboMem master or slaves to be ill-behaved processes and therefore
subject to spontaneous termination by the \s-1OS\s0.
.PP
A command to run follows the \fBjumbomem\fR options.  This can be any
sequential program, subject to the restrictions listed under
\&\s-1RESTRICTIONS\s0 below.
.PP
Options that accept a number of bytes accept the following suffixes to
the \fIbytes\fR argument:
.IP "\fBk\fR (kilobytes)" 4
.IX Item "k (kilobytes)"
Multiply \fIbytes\fR by 1024.
.IP "\fBm\fR (megabytes)" 4
.IX Item "m (megabytes)"
Multiply \fIbytes\fR by 1,048,576
.Pw ( 1024 2 ).
.IP "\fBg\fR (gigabytes)" 4
.IX Item "g (gigabytes)"
Multiply \fIbytes\fR by 1,073,741,824
.Pw ( 1024 3 ).
.PP
If a suffix is not specified, the \fIbytes\fR argument can be specified
in either decimal, octal, or hexadecimal using ordinary C notation:
Numbers beginning with \f(CW\*(C`0x\*(C'\fR are treated as hexadecimal; numbers
beginning with \f(CW0\fR are treated as octal; and all other numbers are
treated as decimal.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Here's how to run an interactive Python session with access to 15
machines' worth of available \s-1RAM\s0 (55\^GB on the cluster on which this
was tested):
.PP
.Vb 1
\&    jumbomem \-np 16 python \-i
.Ve
.PP
Note that we specify \f(CW\*(C`\-np 16\*(C'\fR because we always need one extra
machine to serve as the master, which actually runs the application;
the other machines in the cluster function as memory servers.  The
Python interpreter's \f(CW\*(C`\-i\*(C'\fR option forces an interactive session.
Without it, Python may conclude that it's running in noninteractive
mode (because it was launched from some job-launching daemon such as
\&\fBmpirun\fR's) and not display a prompt, although it will otherwise work
as normal.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Most of the options to the \fBjumbomem\fR script merely set environment
variables that the JumboMem run-time library (\fIlibjumbomem.so\fR) reads
and processes.  The following environment variables are currently
recognized:
.IP "\s-1JM_ASYNCEVICT\s0" 8
.IX Item "JM_ASYNCEVICT"
Corresponds to the \fB\-\-async\-evict\fR option when set to\ \f(CW1\fR; to the
default case when set to\ \f(CW0\fR.
.IP "\s-1JM_BASEADDR\s0" 8
.IX Item "JM_BASEADDR"
Corresponds to the \fB\-\-baseaddr\fR option.
.IP "\s-1JM_DEBUG\s0" 8
.IX Item "JM_DEBUG"
Corresponds to the \fB\-\-debug\fR option.
.IP "\s-1JM_HEARTBEAT\s0" 8
.IX Item "JM_HEARTBEAT"
Corresponds to the \fB\-\-heartbeat\fR option.
.IP "\s-1JM_LOCAL_PAGES\s0" 8
.IX Item "JM_LOCAL_PAGES"
Corresponds to the \fB\-\-pages\fR option.
.IP "\s-1JM_MASTERMEM\s0" 8
.IX Item "JM_MASTERMEM"
Corresponds to the \fB\-\-mastermem\fR option.
.IP "\s-1JM_MEMCPY\s0" 8
.IX Item "JM_MEMCPY"
Corresponds to the \fB\-\-memcopy\fR option when set to\ \f(CW1\fR; to the
default case when set to\ \f(CW0\fR.
.IP "\s-1JM_MLOCK\s0" 8
.IX Item "JM_MLOCK"
Corresponds to the \fB\-\-mlock\fR option.
.IP "\s-1JM_NRE_ENTRIES\s0" 8
.IX Item "JM_NRE_ENTRIES"
Corresponds to the \fB\-\-nre\-entries\fR option.
.IP "\s-1JM_NRE_RETRIES\s0" 8
.IX Item "JM_NRE_RETRIES"
Corresponds to the \fB\-\-nre\-retries\fR option.
.IP "\s-1JM_NRU_INTERVAL\s0" 8
.IX Item "JM_NRU_INTERVAL"
Corresponds to the \fB\-\-nru\-interval\fR option.
.IP "\s-1JM_NRU_RW\s0" 8
.IX Item "JM_NRU_RW"
Corresponds to the \fB\-\-true\-nru\fR option when set to\ \f(CW0\fR; to the
default case when set to\ \f(CW1\fR.
.IP "\s-1JM_PAGESIZE\s0" 8
.IX Item "JM_PAGESIZE"
Corresponds to the \fB\-\-pagesize\fR option.
.IP "\s-1JM_PREFETCH\s0" 8
.IX Item "JM_PREFETCH"
Corresponds to the \fB\-\-prefetch\fR option.
.IP "\s-1JM_RANKVAR\s0" 8
.IX Item "JM_RANKVAR"
Corresponds to the \fB\-\-rankvar\fR option.
.IP "\s-1JM_REDUCEMEM\s0" 8
.IX Item "JM_REDUCEMEM"
Corresponds to the \fB\-\-fast\-start\fR option when set to\ \f(CW0\fR; to the
default case when set to\ \f(CW1\fR.
.IP "\s-1JM_RESERVEMEM\s0" 8
.IX Item "JM_RESERVEMEM"
Corresponds to the \fB\-\-reserve\fR option.
.IP "\s-1JM_SLAVEMEM\s0" 8
.IX Item "JM_SLAVEMEM"
Corresponds to the \fB\-\-slavemem\fR option.
.PP
Note that unlike the corresponding command-line options, environment
variables that specify a number of bytes do not accept a \fBk\fR, \fBm\fR,
or \fBg\fR suffix.
.SH "FILES"
.IX Header "FILES"
.IP "\fIlibjumbomem.so\fR" 8
.IX Item "libjumbomem.so"
The core part of JumboMem.  \fBjumbomem\fR loads \fIlibjumbomem.so\fR into a
process's memory using the dynamic linker's \f(CW\*(C`LD_PRELOAD\*(C'\fR envionrment
variable.  \fIlibjumbomem.so\fR then installs its own memory-allocation
and fault-handling routines.
.IP "\fI$HOME/.jumbomemrc\fR" 8
.IX Item "$HOME/.jumbomemrc"
A configuration file used by \fBjumbomem\fR.  After setting default
values for various environment variables, \fBjumbomem\fR executes the
user's \fI$HOME/.jumbomemrc\fR file, which generally contains code to set
environment variables (see \s-1ENVIRONMENT\s0 above) but can
in fact include arbitrary Bourne-shell code.  For example, putting
\&\f(CW\*(C`JM_DEBUG=2\*(C'\fR in your \fI$HOME/.jumbomemrc\fR changes the default debug
level to\ 2.  Note that \fBjumbomem\fR automatically exports all shell
variables whose name begins with \f(CW\*(C`JM_\*(C'\fR so an explicit \f(CW\*(C`export\*(C'\fR
statement is unnecessary.
.IP "\fI/proc/sys/vm/max_map_count\fR" 8
.IX Item "/proc/sys/vm/max_map_count"
On Linux, this \s-1ASCII\s0 file specifies the maximum number of
memory-mapped regions a process can allocate.  It typically defaults
to 65,536.  JumboMem's minimum logical page size is calculated as the
total address-space size divided by the maximum number of
memory-mapped regions.  Hence, a larger number stored in
\&\fI/proc/sys/vm/max_map_count\fR implies greater flexibility in selecting
a JumboMem logical page size.  System administrators may therefore
want to write a large number to \fI/proc/sys/vm/max_map_count\fR on each
node in their cluster to improve performance on applications that
exhibit poor spatial locality.  (See the description of \fB\-\-pagesize\fR
in the \s-1OPTIONS\s0 section.)
.SH "CAVEATS"
.IX Header "CAVEATS"
Buggy programs that may have happened to work with smaller amounts of
memory will likely fail when run with large amounts of JumboMem
memory.  For example, programs that use 32\-bit integers to keep track
of the number of elements in a data structure will fail when run with
.Pw "" 2 32 ""
(or even
.Pw "" 2 31 )
elements; programs that are sloppy with pointer
arithmetic (e.g.,\ copying a 64\-bit \f(CW\*(C`void\ *\*(C'\fR into a 32\-bit
\&\f(CW\*(C`int\*(C'\fR and back again) will fail when those pointers pass the 32\-bit
boundary.  Check your programs before trying to run them with
JumboMem!
.SH "BUGS"
.IX Header "BUGS"
Probably plenty.  Please report any you can reproduce to the author.
(See \*(L"\s-1AUTHOR\s0\*(R" below.)
.SH "RESTRICTIONS"
.IX Header "RESTRICTIONS"
While JumboMem works well for a number of programs it does not work
well for all programs:
.IP "\(bu" 4
JumboMem cannot handle processes that \f(CW\*(C`fork()\*(C'\fR other processes.  This
is probably the biggest limitation on JumboMem's utility.
.IP "\(bu" 4
Only programs that use 64\-bit pointers can take advantage of the extra
memory provided by JumboMem.
.IP "\(bu" 4
JumboMem manages only memory dynamically allocated with \f(CW\*(C`malloc()\*(C'\fR
and related functions.  Statically declared data structures are not
distributed across the network.  
.SH "NOTES"
.IX Header "NOTES"
.Sh "Troubleshooting"
.IX Subsection "Troubleshooting"
As a user-level program, JumboMem has to rely on a substantial amount
of trickery to convince the target program that vast amounts of memory
are available to it.  Unfortunately, different programs react
differently to all this trickery, which can lead to crashes,
\&\fBjumbomem\fR error messages (e.g., \f(CW\*(C`mmap() failed to allocate
\&\f(CInumber\f(CW bytes at or above address \f(CIaddress\f(CW\*(C'\fR), or other problems.
.PP
Sometimes it helps to to experiment with using different base
addresses for JumboMem's global address space.  (See \fB\-\-baseaddr\fR in
the \s-1OPTIONS\s0 section above.)  The default is to start the
global address space right after the program's data segment.  This has
the advantage of serving as a crutch for buggy programs by enabling as
much data as possible to lie beneath the 32\-bit boundary.  The
disadvantage is that some programs expect to be able to manage all of
the data up to that boundary and consequently end up fighting for
control with JumboMem.  Try \fB\-\-baseaddr\fR=4g and see if that gets the
problematic program to work.
.PP
A common configuration mistake is to omit or incorrectly specify the
\&\s-1LAUNCHCMD\s0 command such that \fBjumbomem\fR launches all slave processes
on the same node, exhausting that node's memory.  If \fBjumbomem\fR
appears to induce excessive disk paging or unexpectedly runs out of
memory, it may be worth scrutinizing the \s-1LAUNCHCMD\s0 variable in
\&\fIcustom.py\fR.  For quick testing you can edit the \f(CW\*(C`launchtemplate\*(C'\fR
line in the \fIjumbomem\fR script; edit \fIcustom.py\fR and rebuild JumboMem
when a suitable \s-1LAUNCHCMD\s0 is found.
.PP
Other problems with JumboMem may be deciphered by increasing
\&\fBjumbomem\fR's debug level.  See \fB\-\-debug\fR in the \s-1OPTIONS\s0 section above and Debug Levels below.
.Sh "Debug levels"
.IX Subsection "Debug levels"
At debug level\ 0, \fBjumbomem\fR outputs no additional information.
At level\ 1 (the default), \fBjumbomem\fR outputs at the start of the
run an ``initializing'' message and the values of some key JumboMem
environment variables (including those set by the \fBjumbomem\fR script).
At the end of the run \fBjumbomem\fR outputs an ``exiting'' message.
Level\ 2 increases \fBjumbomem\fR's verbosity to include a large amount
of configuration detail during initialization and fault statistics
during finalization.  At level\ 3, each slave process additionally
outputs configuration information and termination statistics.  In
addition, \fBjumbomem\fR announces every major increase in the amount of
memory managed by \fBjumbomem\fR (i.e.,\ every invocation of
\&\f(CW\*(C`morecore()\*(C'\fR).  \fBjumbomem\fR output becomes very verbose at level\ 4, at which point every page fetch, eviction, and permission change
and every thread freeze/thaw request is output.  Finally, at debug
levels\ 5 and up, \fBjumbomem\fR outputs every entry to and exit from a
memory-allocation function such as \f(CW\*(C`malloc()\*(C'\fR and \f(CW\*(C`free()\*(C'\fR and every
thread freeze/thaw response.
.Sh "Heartbeat output"
.IX Subsection "Heartbeat output"
The JumboMem heartbeat value (set by \fB\-\-heartbeat\fR or \s-1JM_HEARTBEAT\s0)
is checked only on JumboMem page faults.  Consequently, an application
that rarely page faults will not regularly output the heartbeat status
message.
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Pakin, \fIpakin@lanl.gov\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 Los Alamos National Security, \s-1LLC\s0
.PP
This material was produced under U.S. Government contract
\&\s-1DE\-AC52\-06NA25396\s0 for Los Alamos National Laboratory (\s-1LANL\s0), which is
operated by Los Alamos National Security, \s-1LLC\s0 for the U.S. Department
of Energy.  The U.S. Government has rights to use, reproduce, and
distribute this software.  \s-1NEITHER\s0 \s-1THE\s0 \s-1GOVERNMENT\s0 \s-1NOR\s0 \s-1LOS\s0 \s-1ALAMOS\s0
\&\s-1NATIONAL\s0 \s-1SECURITY\s0, \s-1LLC\s0 \s-1MAKES\s0 \s-1ANY\s0 \s-1WARRANTY\s0, \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1OR\s0
\&\s-1ASSUMES\s0 \s-1ANY\s0 \s-1LIABILITY\s0 \s-1FOR\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0.  If software is
modified to produce derivative works, such modified software should be
clearly marked so as not to confuse it with the version available from
\&\s-1LANL\s0.
.PP
Additionally, this program is free software; you can redistribute it
and/or modify it under the terms of the \s-1GNU\s0 General Public License as
published by the Free Software Foundation; version 2.0 of the License.
Accordingly, this program is distributed in the hope that it will be
useful, but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0
General Public License for more details.
